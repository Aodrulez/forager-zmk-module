// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 8 9 7 15 16 25 26 32 33 17 18 19 27 28 29>;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
        };

        sqtdqt: shift_squote_doublequote {
            compatible = "zmk,behavior-mod-morph";
            label = "sqtdqt";
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dotcolon: shift_dot_colon {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mindqt: shift_minus_dquote {
            compatible = "zmk,behavior-mod-morph";
            label = "MINDQT";
            bindings = <&kp MINUS>, <&kp DOUBLE_QUOTES>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        commsemi: shift_comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_gameMode {
            bindings = <&tog 4>;
            key-positions = <30 33>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        combo_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };
    };

    macros {
        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp L &kp DOT &kp A &kp T &kp U &kp L &kp A &kp L &kp E &kp X &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp B         &kp L            &kp D            &kp W                 &kp Z          &sqtdqt      &kp F          &kp O        &kp U             &kp J
&hml LCTRL N  &hml LEFT_ALT R  &hml LEFT_GUI T  &kp S                 &kp G          &kp Y        &kp H          &hmr RGUI A  &hmr RIGHT_ALT E  &hmr RCTRL I
&kp Q         &kp X            &kp M            &kp C                 &kp V          &kp K        &kp P          &dotcolon    &mindqt           &commsemi
                                                &mt LEFT_SHIFT SPACE  &lt 1 ENTER    &lt 2 ENTER  &kp BACKSPACE
            >;
        };

        left_layer {
            bindings = <
&kp INS     &kp N1  &kp N2  &kp N3  &none     &kp HOME  &none           &kp UP_ARROW    &none            &kp COLON
&kp DEL     &kp N4  &kp N5  &kp N6  &kp N0    &none     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp SEMI
&caps_word  &kp N7  &kp N8  &kp N9  &none     &none     &none           &none           &none            &none
                            &trans  &trans    &trans    &trans
            >;
        };

        right_layer {
            bindings = <
&kp TILDE  &kp LESS_THAN  &kp GREATER_THAN  &kp LBRC  &kp RIGHT_BRACE    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp CARET
&kp EXCL   &kp AT         &kp HASH          &kp DLLR  &kp PRCNT          &kp ASTRK             &kp MINUS              &kp PLUS          &kp BSLH           &kp QMARK
&kp F1     &kp F2         &kp F3            &kp F4    &kp F5             &kp AMPS              &kp UNDER              &kp EQUAL         &kp FSLH           &kp PIPE
                                            &trans    &trans             &trans                &trans
            >;
        };

        tri_layer {
            bindings = <
&sys_reset   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &soft_off         &kp F10  &kp F1  &kp F2  &kp F3  &sys_reset
&bootloader  &none         &none         &none         &none             &kp F11  &kp F4  &kp F5  &kp F6  &bootloader
&bt BT_CLR   &none         &none         &none         &studio_unlock    &kp F12  &kp F7  &kp F8  &kp F9  &none
                                         &trans        &trans            &trans   &trans
            >;
        };

        Game {
            bindings = <
&mt TAB ESCAPE    &kp Q  &kp W  &kp E    &kp R        &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT    &kp A  &kp S  &kp D    &kp F        &trans  &trans  &trans  &trans  &trans
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C    &kp V        &trans  &trans  &trans  &trans  &trans
                                &mt G B  &kp SPACE    &trans  &trans
            >;
        };
    };
};
